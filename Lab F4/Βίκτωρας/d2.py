import matplotlib.pyplot as plt
import numpy as np

mu_0 = 1.25663706e-6   # Διαπερατότητα κενού (H/m)
N = 1200 # Πλήθος σπειρών πηνίου
L = 0.24 # Μήκος πηνίου (m)

# Σκληρός Πυρήνας

I_1 = [0, 0.21, 0.43, 0.6, 0.8, 1, 1.12, 1.4, 1.61, 1.81, 2.05, 1.81, 1.6, 1.4, 1.17, 1, 0.8, 0.6, 0.39, 0.21, 0, -0.1, -0.18, -0.2, -0.4, -0.61, -0.8, -1, -1.22, -1.4, -1.6, -1.82, -2.01, -1.78, -1.6, -1.41, -1.2, -1, -0.81, -0.61, -0.4, -0.2, 0, 0.1, 0.18, 0.39, 0.59, 0.8, 1.01, 1.21, 1.4, 1.6, 1.82, 2.01]
B_1 = [0, 80, 233, 315, 386, 443, 494, 533, 571, 604, 640, 618, 596, 570, 539, 509, 470, 420, 354, 274, 136, 63, -1, -13, -162, -283, -370, -441, -499, -539, -580, -618, -647, -625, -607, -583, -553, -520, -480, -432, -366, -277, -140, -63, 0, 162, 277, 373, 443, 498, 542, 581, 618, 647]
H_1 = [N*x/L for x in I_1]
B_T_1 = [x * 1e-3 for x in B_1]
m_1 = [x/y if y != 0 else None for x,y in zip(B_T_1,H_1)]

#area = np.trapz(B_T_1, H_1) αυτο είναι λάθος καθώς δεν έχει ληφθεί υπόψη η αρχική καμπύλη η οποία δεν πρέπει να μπει στο ολοκλήρωμα αφού δεν αποτελεί κομμάτι του συνόρου του χωρίου που ψάχνουμε το εμβαδόν

# δεδομένα από το 10ο στοιχείο ως το τέλος είναι ο βρόχος
H_loop_1 = H_1[10:]
B_T_loop_1 = B_T_1[10:]

# Βρόχος υστέρησης - προσθήκη του αρχικού σημείου στο τέλος για να κλείσει η καμπύλη
H_loop_1_closed = H_loop_1 + [H_loop_1[0]]
B_T_loop_1_closed = B_T_loop_1 + [B_T_loop_1[0]]

area_1 = np.trapz(B_T_loop_1_closed, H_loop_1_closed)

print(f"Η ενεργειακή απώλεια ανά κύκλο μαγνήτισης για τον σκληρό πυρήνα είναι περίπου {abs(area_1):.2f} J/m^3 \n")

plt.figure(figsize=(8, 6))
plt.plot(H_1, B_T_1, color='blue', linestyle='-')

# Προσθήκη τίτλου και ετικετών αξόνων
plt.title('Γράφημα H vs Β για τον σκληρό πυρήνα')
plt.xlabel('H (A/m)')
plt.ylabel('Β (T)')

# Προσθήκη πλέγματος
plt.grid(True)

# Εμφάνιση γραφήματος
plt.show()

# Διάγραμμα H - μ
mu_00 = [mu_0]*len(H_1)
plt.figure(figsize=(8, 6))
plt.plot(H_1, m_1, color='blue', label='μ(Η)', linestyle='-')
plt.plot(H_1, mu_00, label='Μαγνητική διαπερατότητα του κενού', linestyle='--', color='red')

# Προσθήκη υπομνήματος (legend)
plt.legend()

# Προσθήκη τίτλου και ετικετών αξόνων
plt.title('Γράφημα μ vs H για τον σκληρό πυρήνα')
plt.xlabel('H (A/m)')
plt.ylabel('μ (T·A/m)')

# Προσθήκη πλέγματος
plt.grid(True)

# Εμφάνιση γραφήματος
plt.show()

# Μαλακός Πυρήνας

I_2 = [0, 0.15, 0.3, 0.45, 0.59, 0.76, 0.91, 1.05, 1.21, 1.36, 1.5, 1.34, 1.21, 1.05, 0.91, 0.74, 0.6, 0.45, 0.3, 0.15, 0, 0, -0.02, -0.15, -0.3, -0.45, -0.6, -0.76, -0.91, -1.05, -1.2, -1.36, -1.52, -1.35, -1.18, -1.05, -0.9, -0.75, -0.6, -0.45, -0.3, -0.15, 0, 0, 0.02, 0.15, 0.31, 0.45, 0.6, 0.75, 0.91, 1.05, 1.2, 1.39, 1.5]
B_2 = [0, 154, 328, 496, 639, 800, 916, 1007, 1085, 1137, 1175, 1141, 1106, 1042, 964, 825, 691, 534, 372, 194, 17, 23, 0, -148, -320, -484, -644, -789, -914, -1009, -1083, -1138, -1180, -1145, -1099, -1044, -960, -836, -697, -532, -362, -196, -16, -23, 0, 147, 328, 486, 640, 777, 915, 1006, 1079, 1145, 1173]
H_2 = [N*x/L for x in I_2]
B_T_2 = [x * 1e-3 for x in B_2]
m_2 = [x/y if y != 0 else None for x,y in zip(B_T_2,H_2)]

H_loop_2 = H_2[10:] # Εδώ βάζουμε τη θέση που αντιστοιχεί στο πρώτο πικ του μαγνητικού πεδίου. Προσοχή - η python ξεκινά να μετράει τα στοιχεία από το 0.
B_T_loop_2 = B_T_2[10:]
H_loop_2_closed = H_loop_2 + [H_loop_2[0]]
B_T_loop_2_closed = B_T_loop_2 + [B_T_loop_2[0]]

area_2 = np.trapz(B_T_loop_2_closed, H_loop_2_closed)

print(f"Η ενεργειακή απώλεια ανά κύκλο μαγνήτισης για τον μαλακό πυρήνα είναι περίπου {abs(area_2):.2f} J/m^3 \n")

plt.figure(figsize=(8, 6))
plt.plot(H_2, B_T_2, color='red', linestyle='-')

# Προσθήκη τίτλου και ετικετών αξόνων
plt.title('Γράφημα H vs Β για τον μαλακό πυρήνα')
plt.xlabel('H (A/m)')
plt.ylabel('Β (T)')

# Προσθήκη πλέγματος
plt.grid(True)

# Εμφάνιση γραφήματος
plt.show()

# Διάγραμμα H - μ
mu_01 = [mu_0]*len(H_2)
plt.figure(figsize=(8, 6))
plt.plot(H_2, m_2, color='blue', label='μ(Η)', linestyle='-')
plt.plot(H_2, mu_01, label='Μαγνητική διαπερατότητα του κενού', linestyle='--', color='red')

# Προσθήκη υπομνήματος (legend)
plt.legend()

# Προσθήκη τίτλου και ετικετών αξόνων
plt.title('Γράφημα μ vs Η για τον μαλακό πυρήνα')
plt.xlabel('H (A/m)')
plt.ylabel('μ (T·A/m)')

# Προσθήκη πλέγματος
plt.grid(True)

# Εμφάνιση γραφήματος
plt.show()

# Σύγκριση των αποτελεσμάτων

# Υπολογισμός σχετικής διαπερατότητας
mu_r_1 = [x / mu_0 if x is not None else None for x in m_1]
mu_r_2 = [x / mu_0 if x is not None else None for x in m_2]

# Δημιουργία διαγράμματος
plt.figure(figsize=(10, 6))
plt.plot(H_1, mu_r_1, linestyle='--', color='blue', label='μr - Σκληρός πυρήνας')
plt.plot(H_2, mu_r_2, linestyle='-', color='red', label='μr - Μαλακός πυρήνας')

# Προσθήκη τίτλου και ετικετών
plt.title('Σχετική Διαπερατότητα μr συναρτήσει του H')
plt.xlabel('H (A/m)')
plt.ylabel('μr')

# Πλέγμα και υπόμνημα
plt.grid(True)
plt.legend()

# Εμφάνιση
plt.show()


'''
#τσεκ

plt.figure(figsize=(8, 6))
plt.plot(H_loop_1_closed, B_T_loop_1_closed, 'b-', label='Βρόχος Υστέρησης (κλειστός)')
plt.plot(H_loop_1_closed[0], B_T_loop_1_closed[0], 'ro', label='Αρχικό/Τελικό Σημείο')
plt.legend()
plt.title("Κλειστός Βρόχος Υστέρησης")
plt.xlabel("H (A/m)")
plt.ylabel("B (T)")
plt.grid(True)
plt.show()
'''